---
title: "ML"
author: "TaoMa"
format: html
execute:
  echo: true
  warning: false
  error: false
editor: visual
---

```{r}
library(tidymodels)
library(discrim)
library(themis)

```

```{r}
tidymodels::tidymodels_prefer()
```

```{r}
train_data <- readxl::read_excel('cohort1.xlsx')
test_data <- readxl::read_excel('cohort2.xlsx')

train_data <- train_data %>%
  mutate(TRG=case_when(TRG %in% c(0,1,2)~ 'R',
                       TRG == 3~ 'NR'),
         TRG = as.factor(TRG))

test_data <- test_data %>%
  mutate(TRG=case_when(TRG %in% c(0,1,2)~ 'R',
                       TRG == 3~ 'NR'),
         TRG = as.factor(TRG))


test_data <- test_data %>% 
  select(colnames(train_data))
```

```{r}
set.seed(123)
```

### recipe

```{r}
train_data_recipe <- 
  recipe(TRG ~ PGE2+Tryptophan+Histidine+Arginine+Citrulline, data = train_data) %>% 
  step_smote(TRG, 
             over_ratio = 1,  # 目标比例：少数类/多数类=0.8
             neighbors = 3) %>% 
  step_log(c('PGE2','Tryptophan','Histidine','Arginine','Citrulline')) %>% 
  step_zv(all_predictors()) %>% 
  step_normalize(all_numeric_predictors())

train_data_recipe
```

### models

```{r}
lda_model <- discrim_linear() %>% 
  set_engine("MASS") %>% 
  set_mode("classification")
```



```{r}
cv_folds <- vfold_cv(
  data = train_data, 
  v = 5, 
  repeats = 5,
  strata = TRG)
```

### workflow

```{r}
set.seed(123)
lda_workflow <- workflow() %>%
  add_recipe(train_data_recipe) %>%
  add_model(lda_model)

tune_results <- 
  lda_workflow %>% 
  tune_grid(
    resamples = cv_folds,
    metrics = metric_set(roc_auc, accuracy, sens, spec,f_meas,npv,ppv,recall,mcc,kap),
    control = control_grid(save_pred = TRUE, verbose = TRUE))

```

```{r}
tune_results %>% collect_metrics()

cv_results <- tune_results %>% 
  collect_metrics()
cv_results

write.csv(cv_results,file = 'lda_models/lda_cv_results.csv')
```

```{r}
show_best(tune_results, metric = "roc_auc")

```

```{r}
best_params <- select_best(tune_results, metric = "roc_auc")
best_params
```

```{r}
final_workflow <- lda_workflow %>% 
  finalize_workflow(best_params)

final_fit <- final_workflow %>% 
  fit(data = train_data)
```

```{r}

test_pred <- predict(final_fit, new_data = test_data)  
test_prob <- predict(final_fit, new_data = test_data, type = "prob")

test_results <- test_data %>%
  select(TRG) %>%
  bind_cols(test_pred, test_prob)
test_results
```

## 混淆矩阵

```{r}
test_results <- test_results %>% 
  mutate(TRG = as.factor(TRG))

```


```{r}
set.seed(123)
test_ci <- test_data %>%
  bootstraps(times = 1000) %>%
  mutate(
    metrics = map(splits, ~ {
    preds <- augment(final_fit, new_data = analysis(.x))
    list(
    accuracy = accuracy(preds,truth = TRG,estimate = .pred_class),
    mcc = mcc(preds,truth = TRG,estimate = .pred_class),
    f_meas = f_meas(preds,truth = TRG,estimate = .pred_class),
    ppv = ppv(preds,truth = TRG,estimate = .pred_class),
    roc_auc = roc_auc(preds,truth = TRG,.pred_NR),
    npv = npv(preds,truth = TRG,.pred_class),
    sens = sens(preds,truth = TRG,estimate = .pred_class),
    spec = spec(preds,truth = TRG,estimate = .pred_class),
    recall= recall(preds,truth = TRG,estimate = .pred_class)) %>% 
    map_dfr(as_tibble)
  })) %>%
unnest(metrics)


ci <- test_ci %>%
  group_by(.metric) %>%
  summarise(
    mean = mean(.estimate),
    se = sd(.estimate) / sqrt(n()),
    lower = mean - 1.96 * se,
    upper = mean + 1.96 * se,
    .groups = "drop")

ci

```

```{r}
write.csv(ci,file = 'lda_models/lda_test_results.csv')
```

```{r}
save(list = ls(),file = 'lda_models/lda.Rdata')
```
