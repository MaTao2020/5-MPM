---
title: "ML"
author: "TaoMa"
format: html
execute:
  echo: true
  warning: false
  error: false
  freeze: true
  cache: true
editor: visual
---


```{r}

library(tidymodels)
library(themis)

```

```{r}
tidymodels_prefer()

```

```{r}
library(future)
plan(multisession, workers=8)
nbrOfWorkers() 
```

```{r}

train_data <- readxl::read_excel('cohort1.xlsx')
test_data <- readxl::read_excel('cohort2.xlsx')

```

```{r}
train_data <- train_data %>%
  mutate(TRG=case_when(TRG %in% c(0,1,2)~ 'R',
                       TRG == 3~ 'NR'),
         TRG = as.factor(TRG))

test_data <- test_data %>%
  mutate(TRG=case_when(TRG %in% c(0,1,2)~ 'R',
                       TRG == 3~ 'NR'),
         TRG = as.factor(TRG))


test_data <- test_data %>% 
  select(colnames(train_data))
```

```{r}
set.seed(123)
```

## recipe

```{r}
train_data_recipe <- 
  recipe(TRG ~ PGE2+Tryptophan+Histidine+Arginine+Citrulline, data = train_data) %>% 
  step_smote(TRG, 
             over_ratio = 1,  
             neighbors = 3) %>% 
  step_log(c('PGE2','Tryptophan','Histidine','Arginine','Citrulline')) %>% 
  step_zv(all_predictors()) %>% 
  step_normalize(all_numeric_predictors())

train_data_recipe
```

## models

```{r}
rf_model <- rand_forest(
  mtry = tune(),          
  trees = tune(),       
  min_n = tune()        
) %>%
  set_engine("ranger", importance = "permutation") %>%  # 使用ranger引擎
  set_mode("classification")  # 分类模式

rf_model
```


```{r}
set.seed(123)

rf_grid <- grid_regular(
  trees(range = c(1,150)),
  mtry(range = c(1, 20)), 
  min_n(range = c(3, 10)), 
  levels = 5)
rf_grid
```


```{r}

set.seed(123)
cv_folds <- vfold_cv(
  data = train_data, 
  v = 5, 
  repeats = 5,
  strata = TRG)

```

## workflow

```{r}
set.seed(123)
rf_workflow <- workflow() %>%
  add_recipe(train_data_recipe) %>%
  add_model(rf_model)

tune_results <- 
  rf_workflow %>% 
  tune_grid(
    resamples = cv_folds,
    grid = rf_grid,
    metrics = metric_set(roc_auc, accuracy, sens, spec,f_meas,npv,ppv,recall,mcc,kap),
    control = control_grid(save_pred = TRUE, verbose = TRUE))
  
```

```{r}

tune_results %>% collect_metrics()


```

```{r}

show_best(tune_results, metric = "roc_auc")

```

```{r}

best_params <- select_best(tune_results, metric = "roc_auc")
best_params
```

```{r}

cv_results <- tune_results %>% 
  collect_metrics() %>% 
  filter(mtry ==1 & trees == 38 & min_n==10 )
cv_results

write.csv(cv_results,file = 'RF_models/rf_cv_results.csv')
``